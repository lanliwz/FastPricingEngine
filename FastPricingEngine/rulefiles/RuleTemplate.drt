template header

providerId
providerGroup

ruleName
salienceValue
activationGroup
agendaGroup

pricingType
pricingValue

tier1Flow: Boolean
tier2Flow: Boolean
tier3Flow: Boolean

package default

import com.upupconsultant.pricing.data.pricingEntity
import com.upupconsultant.pricing.model.ProviderGroup


global com.upupconsultant.pricing.service.PricingService services

dialect "mvel"

declare PricingEntity
	@role ( event )
	@expires( 2s )
end


template "tier 1 template"
tier1Flow==true
tier2Flow==false
tier3Flow==false
rule "@{ruleName}"

	salience @{salienceValue}
	activation-group "@{activationGroup}"
	agenda-group "@{agendaGroup}"

	$t : PricingEntity (
	$pg:ProviderGroup(groupName=="@{providerGroup}",$providerId:providerIds)
	providerId==@{providerId}
	,@{providerId}
	) from entry-point "claim stream"
then
	BasicSplitInstruction sint = new BasicSplitInstruction(${pricingType},${pricingValue})
	services.process($t,sinst,kcontext.getRule().getName())
	drools.setFocus("tier1pricing")
	
end

end template

template "tier 2 template"
tier1Flow==true
tier2Flow==false
tier3Flow==false
rule "@{ruleName}"

	salience @{salienceValue}
	activation-group "@{activationGroup}"
	agenda-group "@{agendaGroup}"

	$t : PricingEntity (
	$pg:ProviderGroup(groupName=="@{providerGroup}",$providerId:providerIds)
	providerId==@{providerId}
	,@{providerId}
	) from entry-point "claim stream"
then
	BasicSplitInstruction sint = new BasicSplitInstruction(${pricingType},${pricingValue})
	services.process($t,sinst,kcontext.getRule().getName())
	drools.setFocus("tier2pricing")
	
end

end template

template "tier 3 template"
tier1Flow==true
tier2Flow==false
tier3Flow==false
rule "@{ruleName}"

	salience @{salienceValue}
	activation-group "@{activationGroup}"
	agenda-group "@{agendaGroup}"

	$t : PricingEntity (
	$pg:ProviderGroup(groupName=="@{providerGroup}",$providerId:providerIds)
	providerId==@{providerId}
	,@{providerId}
	) from entry-point "claim stream"
then
	BasicSplitInstruction sint = new BasicSplitInstruction(${pricingType},${pricingValue})
	services.process($t,sinst,kcontext.getRule().getName())
	drools.setFocus("tier3pricing")
	
end

end template